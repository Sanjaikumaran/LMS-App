{"ast":null,"code":"var _jsxFileName = \"/home/sk/Documents/quiz-app/client/src/pages/Tests.js\",\n  _s = $RefreshSig$();\nimport \"../styles/Students.css\";\nimport { useState } from \"react\";\nimport components from \"./components\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  DataTableManagement,\n  handleApiCall,\n  Modal\n} = components;\nconst Tests = () => {\n  _s();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [modalOptions, setModalOptions] = useState();\n  const [isFormModalOpen, setIsFormModalOpen] = useState(false);\n  const showModal = (type, message, buttons, responseFunc) => {\n    setModalOptions({\n      type,\n      message,\n      buttons,\n      responseFunc\n    });\n    setIsModalOpen(true);\n  };\n  const setTime = async () => {\n    setIsFormModalOpen(true);\n    const overlay = document.createElement(\"div\");\n    overlay.className = \"overlay\";\n    document.body.appendChild(overlay);\n    const modalContainer = document.createElement(\"div\");\n    modalContainer.className = \"modal-container\";\n    const createInputField = (column, value = \"\") => {\n      const inputField = document.createElement(\"input\");\n      inputField.className = column;\n      inputField.placeholder = column;\n      inputField.value = value;\n      inputField.type = \"number\";\n      return inputField;\n    };\n    try {\n      const response = await handleApiCall({\n        API: \"find-data\",\n        data: {\n          collection: \"Tests\",\n          condition: {\n            title: \"Time\"\n          }\n        }\n      });\n      console.log(response.data.result);\n      if (response.flag) {\n        delete response.data.result[\"_id\"];\n        console.log(response.data);\n        const data = response.data;\n        [\"Hours\", \"Minutes\", \"Seconds\"].forEach(column => {\n          modalContainer.appendChild(createInputField(column, data[column]));\n        });\n      }\n    } catch (error) {\n      console.log(error.message);\n    }\n    //axios\n    //  .post(`http://${hosts[0]}:5000/find-data`, {\n    //    collection: \"Tests\",\n    //    condition: { title: \"Time\" },\n    //  })\n    //  .then((result) => {\n    //    const data = result.data.result;\n    //    [\"Hours\", \"Minutes\", \"Seconds\"].forEach((column) => {\n    //      modalContainer.appendChild(createInputField(column, data[column]));\n    //    });\n    //  })\n    //  .catch(() => {\n    //    // If there's an error, allow manual input\n    //    window.alert(\"Error fetching time data, please enter manually.\");\n    //    [\"Hours\", \"Minutes\", \"Seconds\"].forEach((column) => {\n    //      modalContainer.appendChild(createInputField(column));\n    //    });\n    //  })\n    //  .finally(() => {\n    //    const saveButton = document.createElement(\"button\");\n    //    saveButton.innerText = \"Save\";\n    //    saveButton.onclick = () => {\n    //      let data = { title: \"Time\" };\n    //      [\"Hours\", \"Minutes\", \"Seconds\"].forEach((column) => {\n    //        const val = document.getElementsByClassName(column)[0].value;\n    //        data[column] = parseInt(val, 10);\n    //      });\n\n    //      axios\n    //        .post(`http://${hosts[0]}:5000/update-data`, {\n    //          condition: { title: \"Time\" },\n    //          data: data,\n    //          collection: \"Tests\",\n    //        })\n    //        .then((result) => {\n    //          if (result.data.upsertedCount || result.data.modifiedCount) {\n    //            window.alert(\"Time updated successfully!\");\n    //          } else {\n    //            throw new Error(\"No data found for update.\");\n    //          }\n    //        })\n    //        .catch(() => {\n    //          // If no update, insert new data\n    //          axios\n    //            .post(`http://${hosts[0]}:5000/insert-data`, {\n    //              data,\n    //              collection: \"Tests\",\n    //            })\n    //            .then(() => {\n    //              window.alert(\"Time added successfully!\");\n    //            })\n    //            .catch((error) => {\n    //              console.error(error);\n    //              window.alert(\"Error saving time data.\");\n    //            });\n    //        });\n\n    //      closeModalAndCleanup();\n    //    };\n\n    //    const closeButton = document.createElement(\"button\");\n    //    closeButton.innerText = \"Close\";\n    //    closeButton.onclick = closeModalAndCleanup;\n\n    //    modalContainer.appendChild(saveButton);\n    //    modalContainer.appendChild(closeButton);\n    //  });\n\n    document.body.appendChild(modalContainer);\n    const closeModalAndCleanup = () => {\n      setIsFormModalOpen(false);\n      modalContainer.remove();\n      document.body.removeChild(overlay);\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(DataTableManagement, {\n      tablePageName: \"Test\",\n      collectionName: \"Tests\",\n      actionButtons: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"upload-button\",\n        onClick: setTime,\n        children: \"Set Time\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(Tests, \"DAvU8APHzkICbPxvCEEcZ1Z/nP4=\");\n_c = Tests;\nexport default Tests;\nvar _c;\n$RefreshReg$(_c, \"Tests\");","map":{"version":3,"names":["useState","components","jsxDEV","_jsxDEV","Fragment","_Fragment","DataTableManagement","handleApiCall","Modal","Tests","_s","isModalOpen","setIsModalOpen","modalOptions","setModalOptions","isFormModalOpen","setIsFormModalOpen","showModal","type","message","buttons","responseFunc","setTime","overlay","document","createElement","className","body","appendChild","modalContainer","createInputField","column","value","inputField","placeholder","response","API","data","collection","condition","title","console","log","result","flag","forEach","error","closeModalAndCleanup","remove","removeChild","children","tablePageName","collectionName","actionButtons","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/sk/Documents/quiz-app/client/src/pages/Tests.js"],"sourcesContent":["import \"../styles/Students.css\";\nimport { useState } from \"react\";\nimport components from \"./components\";\nconst { DataTableManagement, handleApiCall, Modal } = components;\n\nconst Tests = () => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [modalOptions, setModalOptions] = useState();\n\n  const [isFormModalOpen, setIsFormModalOpen] = useState(false);\n  const showModal = (type, message, buttons, responseFunc) => {\n    setModalOptions({ type, message, buttons, responseFunc });\n    setIsModalOpen(true);\n  };\n\n  const setTime = async () => {\n    setIsFormModalOpen(true);\n\n    const overlay = document.createElement(\"div\");\n    overlay.className = \"overlay\";\n    document.body.appendChild(overlay);\n\n    const modalContainer = document.createElement(\"div\");\n    modalContainer.className = \"modal-container\";\n\n    const createInputField = (column, value = \"\") => {\n      const inputField = document.createElement(\"input\");\n      inputField.className = column;\n      inputField.placeholder = column;\n      inputField.value = value;\n      inputField.type = \"number\";\n      return inputField;\n    };\n    try {\n      const response = await handleApiCall({\n        API: \"find-data\",\n        data: { collection: \"Tests\", condition: { title: \"Time\" } },\n      });\n      console.log(response.data.result);\n\n      if (response.flag) {\n        delete response.data.result[\"_id\"];\n\n        console.log(response.data);\n        const data = response.data;\n        [\"Hours\", \"Minutes\", \"Seconds\"].forEach((column) => {\n          modalContainer.appendChild(createInputField(column, data[column]));\n        });\n      }\n    } catch (error) {\n      console.log(error.message);\n    }\n    //axios\n    //  .post(`http://${hosts[0]}:5000/find-data`, {\n    //    collection: \"Tests\",\n    //    condition: { title: \"Time\" },\n    //  })\n    //  .then((result) => {\n    //    const data = result.data.result;\n    //    [\"Hours\", \"Minutes\", \"Seconds\"].forEach((column) => {\n    //      modalContainer.appendChild(createInputField(column, data[column]));\n    //    });\n    //  })\n    //  .catch(() => {\n    //    // If there's an error, allow manual input\n    //    window.alert(\"Error fetching time data, please enter manually.\");\n    //    [\"Hours\", \"Minutes\", \"Seconds\"].forEach((column) => {\n    //      modalContainer.appendChild(createInputField(column));\n    //    });\n    //  })\n    //  .finally(() => {\n    //    const saveButton = document.createElement(\"button\");\n    //    saveButton.innerText = \"Save\";\n    //    saveButton.onclick = () => {\n    //      let data = { title: \"Time\" };\n    //      [\"Hours\", \"Minutes\", \"Seconds\"].forEach((column) => {\n    //        const val = document.getElementsByClassName(column)[0].value;\n    //        data[column] = parseInt(val, 10);\n    //      });\n\n    //      axios\n    //        .post(`http://${hosts[0]}:5000/update-data`, {\n    //          condition: { title: \"Time\" },\n    //          data: data,\n    //          collection: \"Tests\",\n    //        })\n    //        .then((result) => {\n    //          if (result.data.upsertedCount || result.data.modifiedCount) {\n    //            window.alert(\"Time updated successfully!\");\n    //          } else {\n    //            throw new Error(\"No data found for update.\");\n    //          }\n    //        })\n    //        .catch(() => {\n    //          // If no update, insert new data\n    //          axios\n    //            .post(`http://${hosts[0]}:5000/insert-data`, {\n    //              data,\n    //              collection: \"Tests\",\n    //            })\n    //            .then(() => {\n    //              window.alert(\"Time added successfully!\");\n    //            })\n    //            .catch((error) => {\n    //              console.error(error);\n    //              window.alert(\"Error saving time data.\");\n    //            });\n    //        });\n\n    //      closeModalAndCleanup();\n    //    };\n\n    //    const closeButton = document.createElement(\"button\");\n    //    closeButton.innerText = \"Close\";\n    //    closeButton.onclick = closeModalAndCleanup;\n\n    //    modalContainer.appendChild(saveButton);\n    //    modalContainer.appendChild(closeButton);\n    //  });\n\n    document.body.appendChild(modalContainer);\n\n    const closeModalAndCleanup = () => {\n      setIsFormModalOpen(false);\n      modalContainer.remove();\n      document.body.removeChild(overlay);\n    };\n  };\n  return (\n    <>\n      <DataTableManagement\n        tablePageName={\"Test\"}\n        collectionName={\"Tests\"}\n        actionButtons={\n          <button type=\"button\" className=\"upload-button\" onClick={setTime}>\n            Set Time\n          </button>\n        }\n      />\n    </>\n  );\n};\n\nexport default Tests;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}