{"ast":null,"code":"var _jsxFileName = \"/home/sk/Documents/quiz-app/client/src/pages/Quiz.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"../styles/Quiz.css\";\nimport components from \"./components\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  Navbar,\n  Modal,\n  handleApiCall\n} = components;\nconst Quiz = () => {\n  _s();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [modalOptions, setModalOptions] = useState();\n  const [isAutoSubmit, setIsAutoSubmit] = useState(false);\n  const [totalTime, setTotalTime] = useState(1);\n  const [timeLeft, setTimeLeft] = useState(1);\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [highlightedOptions, setHighlightedOptions] = useState([]);\n  const [selectedOptions, setSelectedOptions] = useState([]);\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const response = await handleApiCall({\n          API: \"load-data\",\n          data: {\n            collection: \"Tests\"\n          }\n        });\n        const questionsObj = response.data.map(question => {\n          delete question[\"_id\"];\n          if (question.title) {\n            const minutes = question.Hours * 60 + question.Minutes;\n            const seconds = minutes * 60 + question.Seconds;\n            setTotalTime(seconds);\n            setTimeLeft(seconds);\n            return null;\n          } else {\n            return {\n              ...question,\n              type: question.Answer.length > 1 ? \"checkbox\" : \"radio\"\n            };\n          }\n        });\n        setQuestions(questionsObj.filter(question => question !== null));\n      } catch (error) {\n        console.error(\"Login error:\", error);\n      }\n    }\n    fetchData();\n  }, []);\n  useEffect(() => {\n    if (questions.length) {\n      const intTimer = setInterval(() => {\n        setTimeLeft(prevTimeLeft => {\n          if (prevTimeLeft === 0) {\n            clearInterval(intTimer);\n            return 0;\n          }\n          return prevTimeLeft - 1;\n        });\n      }, 1000);\n      return () => clearInterval(intTimer);\n    }\n  }, [questions, totalTime]);\n  useEffect(() => {\n    if (timeLeft === 0 && !isAutoSubmit) {\n      setIsModalOpen(true);\n      setModalOptions({\n        type: \"Alert\",\n        message: \"Time Out! \\nYour test will be submitted in 10 secs\",\n        buttons: [\"Ok\"],\n        responseFunc: () => {\n          setTimeLeft(10);\n          setTotalTime(10);\n          autoSubmit();\n          setIsAutoSubmit(true);\n          setIsModalOpen(false);\n        }\n      });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [timeLeft, isAutoSubmit]);\n  const autoSubmit = () => {\n    const timer = setTimeout(() => {\n      handleTestSubmit();\n    }, 11000);\n    return () => clearTimeout(timer);\n  };\n  const handleTestSubmit = async () => {\n    if (selectedOptions) {\n      const userData = JSON.parse(localStorage.getItem(\"userData\") || \"{}\"),\n        contact = userData.Contact;\n      let correctAnswers = [],\n        score = 0;\n      questions.forEach(question => {\n        if (!question[\"title\"]) {\n          correctAnswers.push(question[\"Answer\"].length === 1 ? question[\"Answer\"][0] : question[\"Answer\"]);\n        }\n      });\n      await correctAnswers.forEach((correctAnswer, index) => {\n        const userAnswer = selectedOptions[index];\n        if (Array.isArray(correctAnswer)) {\n          if (Array.isArray(userAnswer) && correctAnswer.length === userAnswer.length && correctAnswer.every(ans => userAnswer.includes(ans))) {\n            score++;\n          }\n        } else {\n          if (correctAnswer === userAnswer) {\n            score++;\n          }\n        }\n      });\n      const response = await handleApiCall({\n        API: \"update-data\",\n        data: {\n          condition: {\n            Contact: contact\n          },\n          collection: \"Users\",\n          data: {\n            Answer: JSON.stringify(selectedOptions),\n            Score: score\n          }\n        }\n      });\n      if (response.flag) {\n        setModalOptions({\n          type: \"Info\",\n          message: \"Your test has been submitted!\",\n          buttons: [\"Ok\"],\n          responseFunc: button => {\n            if (button === \"Ok\") {\n              console.log(\"navigate\");\n              setIsModalOpen(false);\n            }\n          }\n        });\n      } else {\n        setModalOptions({\n          type: \"Error\",\n          message: \"Error submitting test! \\n Please contact admin\",\n          buttons: [\"Ok\"],\n          responseFunc: button => {\n            if (button === \"Ok\") {\n              console.log(\"navigate\");\n              setIsModalOpen(false);\n            }\n          }\n        });\n      }\n      setIsModalOpen(true);\n    }\n  };\n  const handleOptionSelect = (option, type) => {\n    const updatedSelections = [...highlightedOptions];\n    if (type === \"radio\") {\n      if (updatedSelections[currentQuestionIndex] === option) {\n        updatedSelections[currentQuestionIndex] = \"not-answered\";\n      } else {\n        updatedSelections[currentQuestionIndex] = option !== undefined ? option : \"not-answered\";\n      }\n    } else if (type === \"checkbox\") {\n      const currentSelections = updatedSelections[currentQuestionIndex] || [];\n      if (currentSelections.includes(option)) {\n        updatedSelections[currentQuestionIndex] = currentSelections.filter(o => o !== option);\n      } else {\n        updatedSelections[currentQuestionIndex] = [...currentSelections, option];\n      }\n      if (updatedSelections[currentQuestionIndex].length === 0) {\n        updatedSelections[currentQuestionIndex] = \"not-answered\";\n      } else if (updatedSelections[currentQuestionIndex] === \"not-answered\" || updatedSelections[currentQuestionIndex] === \"skipped\") {\n        updatedSelections[currentQuestionIndex] = [];\n      }\n    }\n    setHighlightedOptions(updatedSelections);\n    setSelectedOptions(updatedSelections);\n  };\n  const handleQuestionNavigate = direction => {\n    const updatedSelections = [...highlightedOptions];\n    if (updatedSelections[currentQuestionIndex] === undefined) {\n      updatedSelections[currentQuestionIndex] = \"not-answered\";\n    }\n    setHighlightedOptions(updatedSelections);\n    setSelectedOptions(updatedSelections);\n    if (currentQuestionIndex < totalQuestions - 1) {\n      setCurrentQuestionIndex(direction === \"Next\" ? currentQuestionIndex + 1 : currentQuestionIndex - 1);\n    }\n  };\n  const handleSkip = () => {\n    const updatedSelections = [...highlightedOptions];\n    updatedSelections[currentQuestionIndex] = \"skipped\";\n    setHighlightedOptions(updatedSelections);\n    if (currentQuestionIndex < totalQuestions - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    }\n  };\n  const handleQuestionNumberClick = index => {\n    const updatedSelections = [...highlightedOptions];\n    if (updatedSelections[index] === undefined) {\n      updatedSelections[index] = \"not-answered\";\n    }\n    setHighlightedOptions(updatedSelections);\n    setCurrentQuestionIndex(index);\n  };\n  const totalQuestions = questions.length;\n  const currentQuestion = questions[currentQuestionIndex];\n  const selectedOption = highlightedOptions[currentQuestionIndex] || [];\n  const radius = 50;\n  const circumference = 2 * Math.PI * radius;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quiz-body\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"quiz-app\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"quiz-content\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"question-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              children: currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.Question\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              className: \"options\",\n              children: currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.Option.map((option, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                onClick: () => handleOptionSelect(option, currentQuestion.type),\n                className: `\n                option \n                ${currentQuestion.type === \"radio\" && selectedOption === option ? \"selected\" : \"\"}\n                ${currentQuestion.type === \"checkbox\" && selectedOption.includes(option) ? \"selected\" : \"\"}\n            `,\n                children: (currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.type) === \"radio\" ? /*#__PURE__*/_jsxDEV(\"label\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"radio\",\n                    name: `question-${currentQuestionIndex}`,\n                    value: option,\n                    checked: selectedOption === option,\n                    onChange: () => handleOptionSelect(option, \"radio\")\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 284,\n                    columnNumber: 25\n                  }, this), option]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 283,\n                  columnNumber: 23\n                }, this) : /*#__PURE__*/_jsxDEV(\"label\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"checkbox\",\n                    name: `question-${currentQuestionIndex}`,\n                    value: option,\n                    checked: selectedOption.includes(option),\n                    onChange: () => handleOptionSelect(option, \"checkbox\")\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 295,\n                    columnNumber: 25\n                  }, this), option]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 294,\n                  columnNumber: 23\n                }, this)\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 262,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"quiz-footer\",\n          children: [currentQuestionIndex !== 0 ? /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleQuestionNavigate(\"Prev\"),\n            children: \"Previous\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 15\n          }, this) : \"\", /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              return currentQuestionIndex !== totalQuestions - 1 ? handleQuestionNavigate(\"Next\") : handleTestSubmit();\n            },\n            className: currentQuestionIndex !== totalQuestions - 1 ? \"\" : \"submit-button\",\n            children: currentQuestionIndex !== totalQuestions - 1 ? \"Next\" : \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 321,\n            columnNumber: 13\n          }, this), currentQuestionIndex !== totalQuestions - 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleSkip,\n            children: \"Skip\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 336,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Question \", currentQuestionIndex + 1, \" of \", totalQuestions]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"timer-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"header\",\n            children: \"Timer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"timer-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"timer-circle\",\n              children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n                width: \"120\",\n                height: \"120\",\n                children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n                  r: radius,\n                  cx: \"60\",\n                  cy: \"60\",\n                  fill: \"none\",\n                  stroke: \"#e7e7e7\",\n                  strokeWidth: \"8\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 351,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"circle\", {\n                  r: radius,\n                  cx: \"60\",\n                  cy: \"60\",\n                  fill: \"none\",\n                  stroke: \"#007BFF\",\n                  strokeWidth: \"8\",\n                  strokeDasharray: circumference,\n                  strokeDashoffset: circumference - timeLeft / totalTime * circumference,\n                  style: {\n                    transition: \"stroke-dashoffset 1s linear\"\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 359,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 350,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"timer-text\",\n                children: [Math.floor(timeLeft / 60), \"m \", timeLeft % 60, \"s\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 375,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 349,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"Time Remaining\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 379,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question-number-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"header\",\n            children: \"Questions List\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 385,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"grid-layout\",\n            children: Array.from({\n              length: totalQuestions\n            }, (_, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `question-number ${i === currentQuestionIndex ? \"current-question\" : \"\"} ${highlightedOptions[i] === \"skipped\" ? \"skipped\" : highlightedOptions[i] === \"not-answered\" ? \"not-answered\" : highlightedOptions[i] !== undefined ? \"answered\" : \"\"}`,\n              onClick: () => handleQuestionNumberClick(i),\n              children: i + 1\n            }, i + 1, false, {\n              fileName: _jsxFileName,\n              lineNumber: 388,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 386,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 7\n    }, this), isModalOpen && /*#__PURE__*/_jsxDEV(Modal, {\n      modalType: modalOptions.type,\n      modalMessage: modalOptions.message,\n      buttons: modalOptions.buttons,\n      response: modalOptions.responseFunc\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(Quiz, \"Lh5NN4gWSHVLqKTMtwnOyjZ0aM4=\");\n_c = Quiz;\nexport default Quiz;\nvar _c;\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"names":["React","useState","useEffect","components","jsxDEV","_jsxDEV","Fragment","_Fragment","Navbar","Modal","handleApiCall","Quiz","_s","isModalOpen","setIsModalOpen","modalOptions","setModalOptions","isAutoSubmit","setIsAutoSubmit","totalTime","setTotalTime","timeLeft","setTimeLeft","questions","setQuestions","currentQuestionIndex","setCurrentQuestionIndex","highlightedOptions","setHighlightedOptions","selectedOptions","setSelectedOptions","fetchData","response","API","data","collection","questionsObj","map","question","title","minutes","Hours","Minutes","seconds","Seconds","type","Answer","length","filter","error","console","intTimer","setInterval","prevTimeLeft","clearInterval","message","buttons","responseFunc","autoSubmit","timer","setTimeout","handleTestSubmit","clearTimeout","userData","JSON","parse","localStorage","getItem","contact","Contact","correctAnswers","score","forEach","push","correctAnswer","index","userAnswer","Array","isArray","every","ans","includes","condition","stringify","Score","flag","button","log","handleOptionSelect","option","updatedSelections","undefined","currentSelections","o","handleQuestionNavigate","direction","totalQuestions","handleSkip","handleQuestionNumberClick","currentQuestion","selectedOption","radius","circumference","Math","PI","children","fileName","_jsxFileName","lineNumber","columnNumber","className","Question","Option","onClick","name","value","checked","onChange","width","height","r","cx","cy","fill","stroke","strokeWidth","strokeDasharray","strokeDashoffset","style","transition","floor","from","_","i","modalType","modalMessage","_c","$RefreshReg$"],"sources":["/home/sk/Documents/quiz-app/client/src/pages/Quiz.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"../styles/Quiz.css\";\nimport components from \"./components\";\nconst { Navbar, Modal, handleApiCall } = components;\n\nconst Quiz = () => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [modalOptions, setModalOptions] = useState();\n  const [isAutoSubmit, setIsAutoSubmit] = useState(false);\n  const [totalTime, setTotalTime] = useState(1);\n  const [timeLeft, setTimeLeft] = useState(1);\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [highlightedOptions, setHighlightedOptions] = useState([]);\n  const [selectedOptions, setSelectedOptions] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const response = await handleApiCall({\n          API: \"load-data\",\n          data: { collection: \"Tests\" },\n        });\n\n        const questionsObj = response.data.map((question) => {\n          delete question[\"_id\"];\n          if (question.title) {\n            const minutes = question.Hours * 60 + question.Minutes;\n            const seconds = minutes * 60 + question.Seconds;\n\n            setTotalTime(seconds);\n            setTimeLeft(seconds);\n\n            return null;\n          } else {\n            return {\n              ...question,\n              type: question.Answer.length > 1 ? \"checkbox\" : \"radio\",\n            };\n          }\n        });\n\n        setQuestions(questionsObj.filter((question) => question !== null));\n      } catch (error) {\n        console.error(\"Login error:\", error);\n      }\n    }\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    if (questions.length) {\n      const intTimer = setInterval(() => {\n        setTimeLeft((prevTimeLeft) => {\n          if (prevTimeLeft === 0) {\n            clearInterval(intTimer);\n            return 0;\n          }\n          return prevTimeLeft - 1;\n        });\n      }, 1000);\n\n      return () => clearInterval(intTimer);\n    }\n  }, [questions, totalTime]);\n\n  useEffect(() => {\n    if (timeLeft === 0 && !isAutoSubmit) {\n      setIsModalOpen(true);\n      setModalOptions({\n        type: \"Alert\",\n        message: \"Time Out! \\nYour test will be submitted in 10 secs\",\n        buttons: [\"Ok\"],\n        responseFunc: () => {\n          setTimeLeft(10);\n          setTotalTime(10);\n          autoSubmit();\n          setIsAutoSubmit(true);\n          setIsModalOpen(false);\n        },\n      });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [timeLeft, isAutoSubmit]);\n\n  const autoSubmit = () => {\n    const timer = setTimeout(() => {\n      handleTestSubmit();\n    }, 11000);\n\n    return () => clearTimeout(timer);\n  };\n  const handleTestSubmit = async () => {\n    if (selectedOptions) {\n      const userData = JSON.parse(localStorage.getItem(\"userData\") || \"{}\"),\n        contact = userData.Contact;\n      let correctAnswers = [],\n        score = 0;\n\n      questions.forEach((question) => {\n        if (!question[\"title\"]) {\n          correctAnswers.push(\n            question[\"Answer\"].length === 1\n              ? question[\"Answer\"][0]\n              : question[\"Answer\"]\n          );\n        }\n      });\n\n      await correctAnswers.forEach((correctAnswer, index) => {\n        const userAnswer = selectedOptions[index];\n\n        if (Array.isArray(correctAnswer)) {\n          if (\n            Array.isArray(userAnswer) &&\n            correctAnswer.length === userAnswer.length &&\n            correctAnswer.every((ans) => userAnswer.includes(ans))\n          ) {\n            score++;\n          }\n        } else {\n          if (correctAnswer === userAnswer) {\n            score++;\n          }\n        }\n      });\n\n      const response = await handleApiCall({\n        API: \"update-data\",\n        data: {\n          condition: { Contact: contact },\n          collection: \"Users\",\n          data: { Answer: JSON.stringify(selectedOptions), Score: score },\n        },\n      });\n      if (response.flag) {\n        setModalOptions({\n          type: \"Info\",\n          message: \"Your test has been submitted!\",\n          buttons: [\"Ok\"],\n          responseFunc: (button) => {\n            if (button === \"Ok\") {\n              console.log(\"navigate\");\n              setIsModalOpen(false);\n            }\n          },\n        });\n      } else {\n        setModalOptions({\n          type: \"Error\",\n          message: \"Error submitting test! \\n Please contact admin\",\n          buttons: [\"Ok\"],\n          responseFunc: (button) => {\n            if (button === \"Ok\") {\n              console.log(\"navigate\");\n              setIsModalOpen(false);\n            }\n          },\n        });\n      }\n\n      setIsModalOpen(true);\n    }\n  };\n\n  const handleOptionSelect = (option, type) => {\n    const updatedSelections = [...highlightedOptions];\n\n    if (type === \"radio\") {\n      if (updatedSelections[currentQuestionIndex] === option) {\n        updatedSelections[currentQuestionIndex] = \"not-answered\";\n      } else {\n        updatedSelections[currentQuestionIndex] =\n          option !== undefined ? option : \"not-answered\";\n      }\n    } else if (type === \"checkbox\") {\n      const currentSelections = updatedSelections[currentQuestionIndex] || [];\n\n      if (currentSelections.includes(option)) {\n        updatedSelections[currentQuestionIndex] = currentSelections.filter(\n          (o) => o !== option\n        );\n      } else {\n        updatedSelections[currentQuestionIndex] = [\n          ...currentSelections,\n          option,\n        ];\n      }\n\n      if (updatedSelections[currentQuestionIndex].length === 0) {\n        updatedSelections[currentQuestionIndex] = \"not-answered\";\n      } else if (\n        updatedSelections[currentQuestionIndex] === \"not-answered\" ||\n        updatedSelections[currentQuestionIndex] === \"skipped\"\n      ) {\n        updatedSelections[currentQuestionIndex] = [];\n      }\n    }\n\n    setHighlightedOptions(updatedSelections);\n    setSelectedOptions(updatedSelections);\n  };\n\n  const handleQuestionNavigate = (direction) => {\n    const updatedSelections = [...highlightedOptions];\n\n    if (updatedSelections[currentQuestionIndex] === undefined) {\n      updatedSelections[currentQuestionIndex] = \"not-answered\";\n    }\n\n    setHighlightedOptions(updatedSelections);\n    setSelectedOptions(updatedSelections);\n\n    if (currentQuestionIndex < totalQuestions - 1) {\n      setCurrentQuestionIndex(\n        direction === \"Next\"\n          ? currentQuestionIndex + 1\n          : currentQuestionIndex - 1\n      );\n    }\n  };\n\n  const handleSkip = () => {\n    const updatedSelections = [...highlightedOptions];\n\n    updatedSelections[currentQuestionIndex] = \"skipped\";\n\n    setHighlightedOptions(updatedSelections);\n\n    if (currentQuestionIndex < totalQuestions - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    }\n  };\n  const handleQuestionNumberClick = (index) => {\n    const updatedSelections = [...highlightedOptions];\n\n    if (updatedSelections[index] === undefined) {\n      updatedSelections[index] = \"not-answered\";\n    }\n\n    setHighlightedOptions(updatedSelections);\n    setCurrentQuestionIndex(index);\n  };\n  const totalQuestions = questions.length;\n  const currentQuestion = questions[currentQuestionIndex];\n  const selectedOption = highlightedOptions[currentQuestionIndex] || [];\n\n  const radius = 50;\n  const circumference = 2 * Math.PI * radius;\n\n  return (\n    <>\n      <Navbar />\n\n      <div className=\"quiz-body\">\n        <div className=\"quiz-app\">\n          <div className=\"quiz-content\">\n            <div className=\"question-section\">\n              <h1>{currentQuestion?.Question}</h1>\n              <ul className=\"options\">\n                {currentQuestion?.Option.map((option, index) => (\n                  <li\n                    key={index}\n                    onClick={() =>\n                      handleOptionSelect(option, currentQuestion.type)\n                    }\n                    className={`\n                option \n                ${\n                  currentQuestion.type === \"radio\" && selectedOption === option\n                    ? \"selected\"\n                    : \"\"\n                }\n                ${\n                  currentQuestion.type === \"checkbox\" &&\n                  selectedOption.includes(option)\n                    ? \"selected\"\n                    : \"\"\n                }\n            `}\n                  >\n                    {currentQuestion?.type === \"radio\" ? (\n                      <label>\n                        <input\n                          type=\"radio\"\n                          name={`question-${currentQuestionIndex}`}\n                          value={option}\n                          checked={selectedOption === option}\n                          onChange={() => handleOptionSelect(option, \"radio\")}\n                        />\n                        {option}\n                      </label>\n                    ) : (\n                      <label>\n                        <input\n                          type=\"checkbox\"\n                          name={`question-${currentQuestionIndex}`}\n                          value={option}\n                          checked={selectedOption.includes(option)}\n                          onChange={() =>\n                            handleOptionSelect(option, \"checkbox\")\n                          }\n                        />\n                        {option}\n                      </label>\n                    )}\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </div>\n\n          <div className=\"quiz-footer\">\n            {currentQuestionIndex !== 0 ? (\n              <button onClick={() => handleQuestionNavigate(\"Prev\")}>\n                Previous\n              </button>\n            ) : (\n              \"\"\n            )}\n            <button\n              onClick={() => {\n                return currentQuestionIndex !== totalQuestions - 1\n                  ? handleQuestionNavigate(\"Next\")\n                  : handleTestSubmit();\n              }}\n              className={\n                currentQuestionIndex !== totalQuestions - 1\n                  ? \"\"\n                  : \"submit-button\"\n              }\n            >\n              {currentQuestionIndex !== totalQuestions - 1 ? \"Next\" : \"Submit\"}\n            </button>\n            {currentQuestionIndex !== totalQuestions - 1 && (\n              <button onClick={handleSkip}>Skip</button>\n            )}\n\n            <p>\n              Question {currentQuestionIndex + 1} of {totalQuestions}\n            </p>\n          </div>\n        </div>\n        <div>\n          {/* Timer Section */}\n          <div className=\"timer-section\">\n            <h1 className=\"header\">Timer</h1>\n            <div className=\"timer-container\">\n              <div className=\"timer-circle\">\n                <svg width=\"120\" height=\"120\">\n                  <circle\n                    r={radius}\n                    cx=\"60\"\n                    cy=\"60\"\n                    fill=\"none\"\n                    stroke=\"#e7e7e7\"\n                    strokeWidth=\"8\"\n                  ></circle>\n                  <circle\n                    r={radius}\n                    cx=\"60\"\n                    cy=\"60\"\n                    fill=\"none\"\n                    stroke=\"#007BFF\"\n                    strokeWidth=\"8\"\n                    strokeDasharray={circumference}\n                    strokeDashoffset={\n                      circumference - (timeLeft / totalTime) * circumference\n                    }\n                    style={{\n                      transition: \"stroke-dashoffset 1s linear\",\n                    }}\n                  ></circle>\n                </svg>\n                <div className=\"timer-text\">\n                  {Math.floor(timeLeft / 60)}m {timeLeft % 60}s\n                </div>\n              </div>\n              <div>Time Remaining</div>\n            </div>\n          </div>\n\n          {/* Question Number Section */}\n          <div className=\"question-number-container\">\n            <h1 className=\"header\">Questions List</h1>\n            <div className=\"grid-layout\">\n              {Array.from({ length: totalQuestions }, (_, i) => (\n                <div\n                  className={`question-number ${\n                    i === currentQuestionIndex ? \"current-question\" : \"\"\n                  } ${\n                    highlightedOptions[i] === \"skipped\"\n                      ? \"skipped\"\n                      : highlightedOptions[i] === \"not-answered\"\n                      ? \"not-answered\"\n                      : highlightedOptions[i] !== undefined\n                      ? \"answered\"\n                      : \"\"\n                  }`}\n                  key={i + 1}\n                  onClick={() => handleQuestionNumberClick(i)}\n                >\n                  {i + 1}\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n      {isModalOpen && (\n        <Modal\n          modalType={modalOptions.type}\n          modalMessage={modalOptions.message}\n          buttons={modalOptions.buttons}\n          response={modalOptions.responseFunc}\n        />\n      )}\n    </>\n  );\n};\n\nexport default Quiz;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}