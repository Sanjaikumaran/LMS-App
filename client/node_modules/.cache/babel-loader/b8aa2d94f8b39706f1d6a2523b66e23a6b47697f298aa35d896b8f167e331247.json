{"ast":null,"code":"var _jsxFileName = \"/home/sk/Documents/quiz-app/client/src/pages/Tests.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport components from \"./components\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  DataTableManagement,\n  handleApiCall,\n  Modal,\n  createFormModal\n} = components;\nconst Tests = () => {\n  _s();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [modalOptions, setModalOptions] = useState();\n  const setTime = async () => {\n    const createInputField = (column, value = \"\") => {\n      const inputField = document.createElement(\"input\");\n      inputField.className = column;\n      inputField.placeholder = column;\n      inputField.value = value;\n      inputField.type = \"number\";\n      return inputField;\n    };\n    const columns = [\"Hours\", \"Minutes\", \"Seconds\"];\n    let contentElements = [];\n    try {\n      const response = await handleApiCall({\n        API: \"find-data\",\n        data: {\n          collection: \"Tests\",\n          condition: {\n            title: \"Time\"\n          }\n        }\n      });\n      contentElements = columns.map(column => createInputField(column, response.flag ? response.data.result[column] : \"\"));\n    } catch (error) {\n      console.error(error.message);\n      contentElements = columns.map(column => createInputField(column));\n    }\n    const saveCallback = closeModal => async () => {\n      let data = {\n        title: \"Time\"\n      };\n      contentElements.forEach(field => data[field.className] = parseInt(field.value, 10) || 0);\n      try {\n        const response = await handleApiCall({\n          API: \"update-data\",\n          data: {\n            condition: {\n              title: \"Time\"\n            },\n            data,\n            collection: \"Tests\"\n          }\n        });\n        if (response.flag) {\n          showModal(\"Info\", \"Time Updated Successfully!\", [\"Ok\"], () => setIsModalOpen(false));\n          closeModal();\n        } else {\n          throw new Error(\"Update failed\");\n        }\n      } catch (error) {\n        try {\n          const response = await handleApiCall({\n            API: \"insert-data\",\n            data: {\n              data,\n              collection: \"Tests\"\n            }\n          });\n          showModal(response.flag ? \"Info\" : \"Error\", response.flag ? \"Time Added Successfully!\" : \"Error Saving Time Data\", [\"Ok\"], () => setIsModalOpen(false));\n          closeModal();\n        } catch (error) {\n          console.error(error);\n          showModal(\"Uncaught Error\", \"Error Saving Time Data\", [\"Ok\"], () => setIsModalOpen(false));\n          closeModal();\n        }\n      }\n    };\n    createFormModal({\n      headingText: \"Set Time\",\n      elements: contentElements,\n      saveCallback: saveCallback\n    });\n  };\n  const showModal = (type, message, buttons, responseFunc) => {\n    setModalOptions({\n      type,\n      message,\n      buttons,\n      responseFunc\n    });\n    setIsModalOpen(true);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(DataTableManagement, {\n      tablePageName: \"Test\",\n      collectionName: \"Tests\",\n      API: \"Upload-question\",\n      actionButtons: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"upload-button\",\n        onClick: setTime,\n        children: \"Set Time\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), isModalOpen && /*#__PURE__*/_jsxDEV(Modal, {\n      modalType: modalOptions.type || \"Info\",\n      modalMessage: modalOptions.message || \"An unexpected issue occurred.\",\n      buttons: modalOptions.buttons || [\"Ok\"],\n      response: modalOptions.responseFunc || (() => setIsModalOpen(false))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(Tests, \"Oced2ulObc1Bnh1x5YWdfyy0Ar8=\");\n_c = Tests;\nexport default Tests;\nvar _c;\n$RefreshReg$(_c, \"Tests\");","map":{"version":3,"names":["useState","components","jsxDEV","_jsxDEV","Fragment","_Fragment","DataTableManagement","handleApiCall","Modal","createFormModal","Tests","_s","isModalOpen","setIsModalOpen","modalOptions","setModalOptions","setTime","createInputField","column","value","inputField","document","createElement","className","placeholder","type","columns","contentElements","response","API","data","collection","condition","title","map","flag","result","error","console","message","saveCallback","closeModal","forEach","field","parseInt","showModal","Error","headingText","elements","buttons","responseFunc","children","tablePageName","collectionName","actionButtons","onClick","fileName","_jsxFileName","lineNumber","columnNumber","modalType","modalMessage","_c","$RefreshReg$"],"sources":["/home/sk/Documents/quiz-app/client/src/pages/Tests.js"],"sourcesContent":["import { useState } from \"react\";\nimport components from \"./components\";\nconst {\n  DataTableManagement,\n  handleApiCall,\n  Modal,\n  createFormModal,\n} = components;\n\nconst Tests = () => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [modalOptions, setModalOptions] = useState();\n\n  const setTime = async () => {\n    const createInputField = (column, value = \"\") => {\n      const inputField = document.createElement(\"input\");\n      inputField.className = column;\n      inputField.placeholder = column;\n      inputField.value = value;\n      inputField.type = \"number\";\n      return inputField;\n    };\n    const columns = [\"Hours\", \"Minutes\", \"Seconds\"];\n    let contentElements = [];\n    try {\n      const response = await handleApiCall({\n        API: \"find-data\",\n        data: { collection: \"Tests\", condition: { title: \"Time\" } },\n      });\n\n      contentElements = columns.map((column) =>\n        createInputField(\n          column,\n          response.flag ? response.data.result[column] : \"\"\n        )\n      );\n    } catch (error) {\n      console.error(error.message);\n      contentElements = columns.map((column) => createInputField(column));\n    }\n\n    const saveCallback = (closeModal) => async () => {\n      let data = { title: \"Time\" };\n      contentElements.forEach(\n        (field) => (data[field.className] = parseInt(field.value, 10) || 0)\n      );\n\n      try {\n        const response = await handleApiCall({\n          API: \"update-data\",\n          data: { condition: { title: \"Time\" }, data, collection: \"Tests\" },\n        });\n        if (response.flag) {\n          showModal(\"Info\", \"Time Updated Successfully!\", [\"Ok\"], () =>\n            setIsModalOpen(false)\n          );\n          closeModal();\n        } else {\n          throw new Error(\"Update failed\");\n        }\n      } catch (error) {\n        try {\n          const response = await handleApiCall({\n            API: \"insert-data\",\n            data: { data, collection: \"Tests\" },\n          });\n          showModal(\n            response.flag ? \"Info\" : \"Error\",\n            response.flag\n              ? \"Time Added Successfully!\"\n              : \"Error Saving Time Data\",\n            [\"Ok\"],\n            () => setIsModalOpen(false)\n          );\n          closeModal();\n        } catch (error) {\n          console.error(error);\n          showModal(\"Uncaught Error\", \"Error Saving Time Data\", [\"Ok\"], () =>\n            setIsModalOpen(false)\n          );\n          closeModal();\n        }\n      }\n    };\n\n    createFormModal({\n      headingText: \"Set Time\",\n      elements: contentElements,\n      saveCallback: saveCallback,\n    });\n  };\n\n  const showModal = (type, message, buttons, responseFunc) => {\n    setModalOptions({ type, message, buttons, responseFunc });\n    setIsModalOpen(true);\n  };\n  return (\n    <>\n      <DataTableManagement\n        tablePageName={\"Test\"}\n        collectionName={\"Tests\"}\n        API={\"Upload-question\"}\n        actionButtons={\n          <button type=\"button\" className=\"upload-button\" onClick={setTime}>\n            Set Time\n          </button>\n        }\n      />\n      {isModalOpen && (\n        <Modal\n          modalType={modalOptions.type || \"Info\"}\n          modalMessage={modalOptions.message || \"An unexpected issue occurred.\"}\n          buttons={modalOptions.buttons || [\"Ok\"]}\n          response={modalOptions.responseFunc || (() => setIsModalOpen(false))}\n        />\n      )}\n    </>\n  );\n};\n\nexport default Tests;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}