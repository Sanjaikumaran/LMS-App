{"ast":null,"code":"var _jsxFileName = \"/home/sk/Documents/quiz-app/client/src/pages/Instructions.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"../styles/Instructions.css\";\nimport components from \"./components\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  Modal,\n  response\n} = components;\nconst Instructions = ({\n  instructions\n}) => {\n  _s();\n  const userLogged = JSON.parse(sessionStorage.getItem(\"userLogged\"));\n  if (userLogged.flag) {\n    if (userLogged.userType !== \"Student\" || userLogged.userType !== \"Admin\") {\n      window.location.href = \"/\";\n    }\n  }\n  const navigate = useNavigate();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const handleButtonClick = () => {\n    setIsModalOpen(true);\n  };\n  const closeModal = button => {\n    if (response([\"Yes\", \"No\"], button)) {\n      navigate(\"/quiz\");\n    } else {\n      setIsModalOpen(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"instructions-div\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"INSTRUCTIONS\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"instructions\",\n        children: instructions.map((instruction, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: instruction\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"start-test-div\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleButtonClick,\n        children: \"Start Test\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), isModalOpen && /*#__PURE__*/_jsxDEV(Modal, {\n        modalType: \"Confirm\",\n        modalMessage: \"Are you sure to start the test?\",\n        buttons: [\"Yes\", \"No\"],\n        response: closeModal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Instructions, \"6W0g1bPoAhimbHuPKdEUtZwLH+I=\", false, function () {\n  return [useNavigate];\n});\n_c = Instructions;\nexport default Instructions;\nvar _c;\n$RefreshReg$(_c, \"Instructions\");","map":{"version":3,"names":["React","useState","useNavigate","components","jsxDEV","_jsxDEV","Fragment","_Fragment","Modal","response","Instructions","instructions","_s","userLogged","JSON","parse","sessionStorage","getItem","flag","userType","window","location","href","navigate","isModalOpen","setIsModalOpen","handleButtonClick","closeModal","button","children","className","fileName","_jsxFileName","lineNumber","columnNumber","map","instruction","index","onClick","modalType","modalMessage","buttons","_c","$RefreshReg$"],"sources":["/home/sk/Documents/quiz-app/client/src/pages/Instructions.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"../styles/Instructions.css\";\nimport components from \"./components\";\nconst { Modal, response } = components;\n\nconst Instructions = ({ instructions }) => {\n  const userLogged = JSON.parse(sessionStorage.getItem(\"userLogged\"));\n  if (userLogged.flag) {\n    if (userLogged.userType !== \"Student\" || userLogged.userType !== \"Admin\") {\n      window.location.href = \"/\";\n    }\n  }\n  const navigate = useNavigate();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const handleButtonClick = () => {\n    setIsModalOpen(true);\n  };\n  const closeModal = (button) => {\n    if (response([\"Yes\", \"No\"], button)) {\n      navigate(\"/quiz\");\n    } else {\n      setIsModalOpen(false);\n    }\n  };\n  return (\n    <>\n      <div className=\"instructions-div\">\n        <h1>INSTRUCTIONS</h1>\n        <ul className=\"instructions\">\n          {instructions.map((instruction, index) => (\n            <li key={index}>{instruction}</li>\n          ))}\n        </ul>\n      </div>\n      <div className=\"start-test-div\">\n        <button onClick={handleButtonClick}>Start Test</button>\n        {isModalOpen && (\n          <Modal\n            modalType=\"Confirm\"\n            modalMessage=\"Are you sure to start the test?\"\n            buttons={[\"Yes\", \"No\"]}\n            response={closeModal}\n          />\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default Instructions;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAO,4BAA4B;AACnC,OAAOC,UAAU,MAAM,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACtC,MAAM;EAAEC,KAAK;EAAEC;AAAS,CAAC,GAAGN,UAAU;AAEtC,MAAMO,YAAY,GAAGA,CAAC;EAAEC;AAAa,CAAC,KAAK;EAAAC,EAAA;EACzC,MAAMC,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACC,cAAc,CAACC,OAAO,CAAC,YAAY,CAAC,CAAC;EACnE,IAAIJ,UAAU,CAACK,IAAI,EAAE;IACnB,IAAIL,UAAU,CAACM,QAAQ,KAAK,SAAS,IAAIN,UAAU,CAACM,QAAQ,KAAK,OAAO,EAAE;MACxEC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,GAAG;IAC5B;EACF;EACA,MAAMC,QAAQ,GAAGrB,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACsB,WAAW,EAAEC,cAAc,CAAC,GAAGxB,QAAQ,CAAC,KAAK,CAAC;EAErD,MAAMyB,iBAAiB,GAAGA,CAAA,KAAM;IAC9BD,cAAc,CAAC,IAAI,CAAC;EACtB,CAAC;EACD,MAAME,UAAU,GAAIC,MAAM,IAAK;IAC7B,IAAInB,QAAQ,CAAC,CAAC,KAAK,EAAE,IAAI,CAAC,EAAEmB,MAAM,CAAC,EAAE;MACnCL,QAAQ,CAAC,OAAO,CAAC;IACnB,CAAC,MAAM;MACLE,cAAc,CAAC,KAAK,CAAC;IACvB;EACF,CAAC;EACD,oBACEpB,OAAA,CAAAE,SAAA;IAAAsB,QAAA,gBACExB,OAAA;MAAKyB,SAAS,EAAC,kBAAkB;MAAAD,QAAA,gBAC/BxB,OAAA;QAAAwB,QAAA,EAAI;MAAY;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACrB7B,OAAA;QAAIyB,SAAS,EAAC,cAAc;QAAAD,QAAA,EACzBlB,YAAY,CAACwB,GAAG,CAAC,CAACC,WAAW,EAAEC,KAAK,kBACnChC,OAAA;UAAAwB,QAAA,EAAiBO;QAAW,GAAnBC,KAAK;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAmB,CAClC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC,eACN7B,OAAA;MAAKyB,SAAS,EAAC,gBAAgB;MAAAD,QAAA,gBAC7BxB,OAAA;QAAQiC,OAAO,EAAEZ,iBAAkB;QAAAG,QAAA,EAAC;MAAU;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,EACtDV,WAAW,iBACVnB,OAAA,CAACG,KAAK;QACJ+B,SAAS,EAAC,SAAS;QACnBC,YAAY,EAAC,iCAAiC;QAC9CC,OAAO,EAAE,CAAC,KAAK,EAAE,IAAI,CAAE;QACvBhC,QAAQ,EAAEkB;MAAW;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtB,CACF;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA,eACN,CAAC;AAEP,CAAC;AAACtB,EAAA,CA3CIF,YAAY;EAAA,QAOCR,WAAW;AAAA;AAAAwC,EAAA,GAPxBhC,YAAY;AA6ClB,eAAeA,YAAY;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}